(INFO):## BEGIN Calculating follow set for variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): Case 1: Found variable Variables.EXPRARITHPRIME at the end of production [<Variables.PROD: ('<Prod>',)>, <Variables.EXPRARITHPRIME: ("<ExprArith'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): Case 1: Found variable Variables.EXPRARITH at the end of production [<Terminals.VARNAME: ('[VarName]',)>, <Terminals.ASSIGN: (':=',)>, <Variables.EXPRARITH: ('<ExprArith>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): Case 1: Found variable Variables.ASSIGN at the end of production [<Variables.ASSIGN: ('<Assign>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): Case 2.2.1: Found variable Variables.INSTTAIL after variable Variables.INSTRUCTION and epsilon is in first set of Variables.INSTTAIL
(DEBUG): Case 2.2.1: Consider applying rule with epsilon in the next iteration
(INFO):## BEGIN Calculating follow set for variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): Case 1: Found variable Variables.INSTTAIL at the end of production [<Variables.INSTRUCTION: ('<Instruction>',)>, <Variables.INSTTAIL: ('<InstTail>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): Case 1: Found variable Variables.INSTLIST at the end of production [<Variables.INSTLIST: ('<InstList>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.CODE
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): Case 2.1: Found terminal Terminals.END after variable Variables.CODE
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.CODE: {<Terminals.END: ('end',)>}


(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): Case 1: Found variable Variables.INSTLIST at the end of production [<Terminals.DOTS: ('...',)>, <Variables.INSTLIST: ('<InstList>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.INSTTAIL
(DEBUG): Base case: Follow set for Variables.INSTTAIL already computed: set()
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): Case 2.1: Found terminal Terminals.END after variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.INSTLIST: {<Terminals.END: ('end',)>}


(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.INSTTAIL: {<Terminals.END: ('end',)>}


(DEBUG): Case 2.2.1: Found variable Variables.INSTTAIL at the end of production [<Variables.INSTRUCTION: ('<Instruction>',)>, <Variables.INSTTAIL: ('<InstTail>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.INSTLIST
(DEBUG): Base case: Follow set for Variables.INSTLIST already computed: {<Terminals.END: ('end',)>}
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): Case 2.1: Found terminal Terminals.ELSE after variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): Case 1: Found variable Variables.INSTRUCTION at the end of production [<Variables.INSTRUCTION: ('<Instruction>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): Case 1: Found variable Variables.ELSETAIL at the end of production [<Terminals.IF: ('if',)>, <Variables.COND: ('<Cond>',)>, <Terminals.THEN: ('then',)>, <Variables.INSTRUCTION: ('<Instruction>',)>, <Terminals.ELSE: ('else',)>, <Variables.ELSETAIL: ('<ElseTail>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.IF
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): Case 1: Found variable Variables.IF at the end of production [<Variables.IF: ('<If>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.INSTRUCTION
(DEBUG): Base case: Follow set for Variables.INSTRUCTION already computed: {<Terminals.END: ('end',)>, <Terminals.ELSE: ('else',)>, <Terminals.DOTS: ('...',)>}
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.IF: {<Terminals.END: ('end',)>, <Terminals.ELSE: ('else',)>, <Terminals.DOTS: ('...',)>}


(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.ELSETAIL: {<Terminals.END: ('end',)>, <Terminals.ELSE: ('else',)>, <Terminals.DOTS: ('...',)>}


(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.INSTRUCTION: {<Terminals.ELSE: ('else',)>, <Terminals.END: ('end',)>, <Terminals.DOTS: ('...',)>}


(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.ASSIGN: {<Terminals.DOTS: ('...',)>, <Terminals.ELSE: ('else',)>, <Terminals.END: ('end',)>}


(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): Case 2.1: Found terminal Terminals.RPAREN after variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): Case 2.2.2: Found variable Variables.COMP after variable Variables.EXPRARITH and epsilon is not in first set of Variables.COMP
(DEBUG): Case 1: Found variable Variables.EXPRARITH at the end of production [<Variables.EXPRARITH: ('<ExprArith>',)>, <Variables.COMP: '<Comp>'>, <Variables.EXPRARITH: ('<ExprArith>',)>]
(INFO):## BEGIN Calculating follow set for variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): Case 2.2.1: Found variable Variables.ANDPRIME after variable Variables.CONDATOM and epsilon is in first set of Variables.ANDPRIME
(DEBUG): Case 2.2.1: Consider applying rule with epsilon in the next iteration
(INFO):## BEGIN Calculating follow set for variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): Case 1: Found variable Variables.ANDPRIME at the end of production [<Variables.CONDATOM: ('<CondAtom>',)>, <Variables.ANDPRIME: ("<And'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.AND
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): Case 2.2.1: Found variable Variables.CONDPRIME after variable Variables.AND and epsilon is in first set of Variables.CONDPRIME
(DEBUG): Case 2.2.1: Consider applying rule with epsilon in the next iteration
(INFO):## BEGIN Calculating follow set for variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): Case 1: Found variable Variables.CONDPRIME at the end of production [<Variables.AND: ('<And>',)>, <Variables.CONDPRIME: ("<Cond'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.COND
(DEBUG): ### Checking variable Variables.PROGRAM
(DEBUG): ### Checking variable Variables.CODE
(DEBUG): ### Checking variable Variables.INSTLIST
(DEBUG): ### Checking variable Variables.INSTTAIL
(DEBUG): ### Checking variable Variables.INSTRUCTION
(DEBUG): Case 2.1: Found terminal Terminals.DO after variable Variables.COND
(DEBUG): ### Checking variable Variables.ASSIGN
(DEBUG): ### Checking variable Variables.EXPRARITH
(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): Case 2.1: Found terminal Terminals.THEN after variable Variables.COND
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): Case 2.1: Found terminal Terminals.RBRACK after variable Variables.COND
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.COND: {<Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}


(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.CONDPRIME: {<Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}


(DEBUG): Case 2.2.1: Found variable Variables.CONDPRIME at the end of production [<Variables.AND: ('<And>',)>, <Variables.CONDPRIME: ("<Cond'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.COND
(DEBUG): Base case: Follow set for Variables.COND already computed: {<Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): Case 2.2.1: Found variable Variables.CONDPRIME after variable Variables.AND and epsilon is in first set of Variables.CONDPRIME
(DEBUG): Case 2.2.1: Consider applying rule with epsilon in the next iteration
(INFO):## BEGIN Calculating follow set for variable Variables.CONDPRIME
(DEBUG): Base case: Follow set for Variables.CONDPRIME already computed: {<Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}
(DEBUG): Case 2.2.1: Found variable Variables.CONDPRIME at the end of production [<Terminals.OR: ('or',)>, <Variables.AND: ('<And>',)>, <Variables.CONDPRIME: ("<Cond'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.CONDPRIME
(DEBUG): Base case: Follow set for Variables.CONDPRIME already computed: {<Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.AND: {<Terminals.OR: ('or',)>, <Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}


(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.ANDPRIME: {<Terminals.OR: ('or',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>, <Terminals.THEN: ('then',)>}


(DEBUG): Case 2.2.1: Found variable Variables.ANDPRIME at the end of production [<Variables.CONDATOM: ('<CondAtom>',)>, <Variables.ANDPRIME: ("<And'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.AND
(DEBUG): Base case: Follow set for Variables.AND already computed: {<Terminals.OR: ('or',)>, <Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): Case 2.2.1: Found variable Variables.ANDPRIME after variable Variables.CONDATOM and epsilon is in first set of Variables.ANDPRIME
(DEBUG): Case 2.2.1: Consider applying rule with epsilon in the next iteration
(INFO):## BEGIN Calculating follow set for variable Variables.ANDPRIME
(DEBUG): Base case: Follow set for Variables.ANDPRIME already computed: {<Terminals.OR: ('or',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>, <Terminals.THEN: ('then',)>}
(DEBUG): Case 2.2.1: Found variable Variables.ANDPRIME at the end of production [<Terminals.AND: ('and',)>, <Variables.CONDATOM: ('<CondAtom>',)>, <Variables.ANDPRIME: ("<And'>",)>]
(INFO):## BEGIN Calculating follow set for variable Variables.ANDPRIME
(DEBUG): Base case: Follow set for Variables.ANDPRIME already computed: {<Terminals.OR: ('or',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>, <Terminals.THEN: ('then',)>}
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.CONDATOM: {<Terminals.AND: ('and',)>, <Terminals.OR: ('or',)>, <Terminals.THEN: ('then',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}


(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.EXPRARITH: {<Terminals.RPAREN: (')',)>, <Terminals.AND: ('and',)>, <Terminals.DOTS: ('...',)>, <Terminals.OR: ('or',)>, <Terminals.EQUAL: ('=',)>, <Terminals.ELSE: ('else',)>, <Terminals.END: ('end',)>, <Terminals.THEN: ('then',)>, <Terminals.SMALLER: ('<',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}


(DEBUG): ### Checking variable Variables.EXPRARITHPRIME
(DEBUG): ### Checking variable Variables.PROD
(DEBUG): ### Checking variable Variables.PRODPRIME
(DEBUG): ### Checking variable Variables.ATOM
(DEBUG): ### Checking variable Variables.IF
(DEBUG): ### Checking variable Variables.ELSETAIL
(DEBUG): ### Checking variable Variables.COND
(DEBUG): ### Checking variable Variables.CONDPRIME
(DEBUG): ### Checking variable Variables.AND
(DEBUG): ### Checking variable Variables.ANDPRIME
(DEBUG): ### Checking variable Variables.CONDATOM
(DEBUG): ### Checking variable Variables.COMP
(INFO):## END follow set for variable Variables.EXPRARITHPRIME: {<Terminals.RPAREN: (')',)>, <Terminals.AND: ('and',)>, <Terminals.DOTS: ('...',)>, <Terminals.OR: ('or',)>, <Terminals.EQUAL: ('=',)>, <Terminals.ELSE: ('else',)>, <Terminals.END: ('end',)>, <Terminals.THEN: ('then',)>, <Terminals.SMALLER: ('<',)>, <Terminals.DO: ('do',)>, <Terminals.RBRACK: ('}',)>}

